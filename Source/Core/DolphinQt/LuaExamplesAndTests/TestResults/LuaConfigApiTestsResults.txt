Test 1:
Testing calling the getLayerNames_mostGlobalFirst() function. Should have a return value of: Base, CommandLine, GlobalGame, LocalGame, Movie, Netplay, CurrentRun
Actual value equaled the expected value...  Test passed!


Test 2:
Testing calling the getListOfSystems() function. Should have a return value of: Main, Sysconf, GCPad, WiiPad, GCKeyboard, GFX, Logger, Debugger, DualShockUDPClient, FreeLook, Session, GameSettingsOnly, Achievements
Actual value equaled the expected value... Test passed!


Test 3:
Testing calling the getConfigEnumTypes() function. Should have a return value of: CPUCore, DPL2Quality, EXIDeviceType, SIDeviceType, HSPDeviceType, Region, ShowCursor, LogLevel, FreeLookControl, AspectMode, ShaderCompilationMode, TriState, TextureFilteringMode, StereoMode, WiimoteSource
Actual value equaled the expected value... Test passed!


Test 4:
Testing CPUCore enum type range. Expected list of values returned is: CACHEDINTERPRETER, INTERPRETER, JIT64, JITARM64
Actual value equaled the expected value... Test passed!
Test 5:
Testing DPL2Quality enum type range. Expected list of values returned is: HIGH, HIGHEST, LOW, LOWEST
Actual value equaled the expected value... Test passed!
Test 6:
Testing EXIDeviceType enum type range. Expected list of values returned is: AD16, AGP, AMBASEBOARD, DUMMY, ETHERNET, ETHERNETBUILTIN, ETHERNETTAPSERVER, ETHERNETXLINK, GECKO, MASKROM, MEMORYCARD, MEMORYCARDFOLDER, MICROPHONE, NONE
Actual value equaled the expected value... Test passed!
Test 7:
Testing SIDeviceType enum type range. Expected list of values returned is: AM_BASEBOARD, DANCEMAT, GC_CONTROLLER, GC_GBA, GC_GBA_EMULATED, GC_KEYBOARD, GC_STEERING, GC_TARUKONGA, N64_CONTROLLER, N64_KEYBOARD, N64_MIC, N64_MOUSE, NONE, WIIU_ADAPTER
Actual value equaled the expected value... Test passed!
Test 8:
Testing HSPDeviceType enum type range. Expected list of values returned is: ARAMEXPANSION, NONE
Actual value equaled the expected value... Test passed!
Test 9:
Testing Region enum type range. Expected list of values returned is: NTSC_J, NTSC_K, NTSC_U, PAL, UNKNOWN
Actual value equaled the expected value... Test passed!
Test 10:
Testing ShowCursor enum type range. Expected list of values returned is: CONSTANTLY, NEVER, ONMOVEMENT
Actual value equaled the expected value... Test passed!
Test 11:
Testing LogLevel enum type range. Expected list of values returned is: LDEBUG, LERROR, LINFO, LNOTICE, LWARNING
Actual value equaled the expected value... Test passed!
Test 12:
Testing FreeLookControl enum type range. Expected list of values returned is: FPS, ORBITAL, SIXAXIS
Actual value equaled the expected value... Test passed!
Test 13:
Testing AspectMode enum type range. Expected list of values returned is: ANALOG, ANALOGWIDE, AUTO, STRETCH
Actual value equaled the expected value... Test passed!
Test 14:
Testing ShaderCompilationMode enum type range. Expected list of values returned is: ASYNCHRONOUSSKIPRENDERING, ASYNCHRONOUSUBERSHADERS, SYNCHRONOUS, SYNCHRONOUSUBERSHADERS
Actual value equaled the expected value... Test passed!
Test 15:
Testing TriState enum type range. Expected list of values returned is: AUTO, OFF, ON
Actual value equaled the expected value... Test passed!
Test 16:
Testing TextureFilteringMode enum type range. Expected list of values returned is: DEFAULT, LINEAR, NEAREST
Actual value equaled the expected value... Test passed!
Test 17:
Testing StereoMode enum type range. Expected list of values returned is: ANAGLYPH, OFF, PASSIVE, QUADBUFFER, SBS, TAB
Actual value equaled the expected value... Test passed!
Test 18:
Testing WiimoteSource enum type range. Expected list of values returned is: EMULATED, NONE, REAL
Actual value equaled the expected value... Test passed!


Testing writing to each layer...
Test 19:
Testing writing to layer Base for System - Main, Section - Interface, SettingName - debugModeEnabled
Test passed!


Test 20:
Testing writing to layer CommandLine for System - Main, Section - Interface, SettingName - debugModeEnabled
Test passed!


Test 21:
Testing writing to layer GlobalGame for System - Main, Section - Interface, SettingName - debugModeEnabled
Test passed!


Test 22:
Testing writing to layer LocalGame for System - Main, Section - Interface, SettingName - debugModeEnabled
Test passed!


Test 23:
Testing writing to layer Movie for System - Main, Section - Interface, SettingName - debugModeEnabled
Layer Movie did not exist - skipping test...


Test 24:
Testing writing to layer Netplay for System - Main, Section - Interface, SettingName - debugModeEnabled
Layer Netplay did not exist - skipping test...


Test 25:
Testing writing to layer CurrentRun for System - Main, Section - Interface, SettingName - debugModeEnabled
Test passed!


Test 26:
Testing writing integer value to CurrentRun and then to Base, and making sure that value from CurrentRun is the one that was used...
Test passed!


Testing that all systems can be written to...

Test 27:
Testing writing to system MAIN in section Interface with a variable debugModeEnabled of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 28:
Testing writing to system MAIN in section Interface with a variable debugModeEnabled of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 29:
Testing writing to system SYSCONF in section IPL with a variable SADR of type u32 and a value of 2, and making sure it has the same value when read back out at the same layer...
Value written of 2 and value read of 2 were equal. Test passed!

Test 30:
Testing writing to system SYSCONF in section IPL with a variable SADR of type u32 and a value of 2, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of 2 and value read of 2 were equal. Test passed!

Test 31:
Testing writing to system GCPad in section Buttons with a variable A of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 32:
Testing writing to system GCPad in section Buttons with a variable A of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 33:
Testing writing to system WiiPad in section Buttons with a variable B of type boolean and a value of false, and making sure it has the same value when read back out at the same layer...
Value written of false and value read of false were equal. Test passed!

Test 34:
Testing writing to system WiiPad in section Buttons with a variable B of type boolean and a value of false, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of false and value read of false were equal. Test passed!

Test 35:
Testing writing to system GCKeyboard in section Keys with a variable Enter of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 36:
Testing writing to system GCKeyboard in section Keys with a variable Enter of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 37:
Testing writing to system GFX in section Settings with a variable ShaderCompilerThreads of type s32 and a value of 5, and making sure it has the same value when read back out at the same layer...
Value written of 5 and value read of 5 were equal. Test passed!

Test 38:
Testing writing to system GFX in section Settings with a variable ShaderCompilerThreads of type s32 and a value of 5, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of 5 and value read of 5 were equal. Test passed!

Test 39:
Testing writing to system Logger in section Options with a variable WriteToConsole of type boolean and a value of false, and making sure it has the same value when read back out at the same layer...
Value written of false and value read of false were equal. Test passed!

Test 40:
Testing writing to system Logger in section Options with a variable WriteToConsole of type boolean and a value of false, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of false and value read of false were equal. Test passed!

Test 41:
Testing writing to system Debugger in section Settings with a variable enabledTracing of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 42:
Testing writing to system Debugger in section Settings with a variable enabledTracing of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 43:
Testing writing to system DualShockUDPClient in section Server with a variable IPAddress of type string and a value of customIP, and making sure it has the same value when read back out at the same layer...
Value written of customIP and value read of customIP were equal. Test passed!

Test 44:
Testing writing to system DualShockUDPClient in section Server with a variable IPAddress of type string and a value of customIP, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of customIP and value read of customIP were equal. Test passed!

Test 45:
Testing writing to system FreeLook in section General with a variable Enabled of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 46:
Testing writing to system FreeLook in section General with a variable Enabled of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 47:
Testing writing to system Session in section Core with a variable LoadIPLDump of type boolean and a value of false, and making sure it has the same value when read back out at the same layer...
Value written of false and value read of false were equal. Test passed!

Test 48:
Testing writing to system Session in section Core with a variable LoadIPLDump of type boolean and a value of false, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of false and value read of false were equal. Test passed!

Test 49:
Testing writing to system GameSettingsOnly in section General with a variable useBackgroundInputs of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 50:
Testing writing to system GameSettingsOnly in section General with a variable useBackgroundInputs of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 51:
Testing writing to system Achievements in section Achievements with a variable Enabled of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 52:
Testing writing to system Achievements in section Achievements with a variable Enabled of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!



Testing that all non-enum types can have their get/set methods called...

Test 53:
Testing writing to system MAIN in section Interface with a variable debugModeEnabled of type boolean and a value of true, and making sure it has the same value when read back out at the same layer...
Value written of true and value read of true were equal. Test passed!

Test 54:
Testing writing to system MAIN in section Interface with a variable debugModeEnabled of type boolean and a value of true, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of true and value read of true were equal. Test passed!

Test 55:
Testing writing to system MAIN in section Core with a variable TimingVariance of type s32 and a value of 312, and making sure it has the same value when read back out at the same layer...
Value written of 312 and value read of 312 were equal. Test passed!

Test 56:
Testing writing to system MAIN in section Core with a variable TimingVariance of type s32 and a value of 312, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of 312 and value read of 312 were equal. Test passed!

Test 57:
Testing writing to system MAIN in section Core with a variable MEM1Size of type u32 and a value of 564, and making sure it has the same value when read back out at the same layer...
Value written of 564 and value read of 564 were equal. Test passed!

Test 58:
Testing writing to system MAIN in section Core with a variable MEM1Size of type u32 and a value of 564, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of 564 and value read of 564 were equal. Test passed!

Test 59:
Testing writing to system MAIN in section Core with a variable EmulationSpeed of type float and a value of 54.25, and making sure it has the same value when read back out at the same layer...
Value written of 54.25 and value read of 54.25 were equal. Test passed!

Test 60:
Testing writing to system MAIN in section Core with a variable EmulationSpeed of type float and a value of 54.25, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of 54.25 and value read of 54.25 were equal. Test passed!

Test 61:
Testing writing to system MAIN in section Core with a variable GFXBackend of type string and a value of newBackendName, and making sure it has the same value when read back out at the same layer...
Value written of newBackendName and value read of newBackendName were equal. Test passed!

Test 62:
Testing writing to system MAIN in section Core with a variable GFXBackend of type string and a value of newBackendName, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of newBackendName and value read of newBackendName were equal. Test passed!



Testing that all enum types can have their get/set methods called, and that all enum value types can be written to a config setting of each enum type...

Testing enum type of CPUCore
Test 63:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of CACHEDINTERPRETER, and making sure it has the same value when read back out at the same layer...
Value written of CACHEDINTERPRETER and value read of CACHEDINTERPRETER were equal. Test passed!

Test 64:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of CACHEDINTERPRETER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of CACHEDINTERPRETER and value read of CACHEDINTERPRETER were equal. Test passed!

Testing enum type of CPUCore
Test 65:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of INTERPRETER, and making sure it has the same value when read back out at the same layer...
Value written of INTERPRETER and value read of INTERPRETER were equal. Test passed!

Test 66:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of INTERPRETER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of INTERPRETER and value read of INTERPRETER were equal. Test passed!

Testing enum type of CPUCore
Test 67:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of JIT64, and making sure it has the same value when read back out at the same layer...
Value written of JIT64 and value read of JIT64 were equal. Test passed!

Test 68:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of JIT64, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of JIT64 and value read of JIT64 were equal. Test passed!

Testing enum type of CPUCore
Test 69:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of JITARM64, and making sure it has the same value when read back out at the same layer...
Value written of JITARM64 and value read of JITARM64 were equal. Test passed!

Test 70:
Testing writing to system MAIN in section Core with a variable CPUCore of type CPUCore and a value of JITARM64, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of JITARM64 and value read of JITARM64 were equal. Test passed!

Testing enum type of DPL2Quality
Test 71:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of HIGH, and making sure it has the same value when read back out at the same layer...
Value written of HIGH and value read of HIGH were equal. Test passed!

Test 72:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of HIGH, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of HIGH and value read of HIGH were equal. Test passed!

Testing enum type of DPL2Quality
Test 73:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of HIGHEST, and making sure it has the same value when read back out at the same layer...
Value written of HIGHEST and value read of HIGHEST were equal. Test passed!

Test 74:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of HIGHEST, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of HIGHEST and value read of HIGHEST were equal. Test passed!

Testing enum type of DPL2Quality
Test 75:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of LOW, and making sure it has the same value when read back out at the same layer...
Value written of LOW and value read of LOW were equal. Test passed!

Test 76:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of LOW, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LOW and value read of LOW were equal. Test passed!

Testing enum type of DPL2Quality
Test 77:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of LOWEST, and making sure it has the same value when read back out at the same layer...
Value written of LOWEST and value read of LOWEST were equal. Test passed!

Test 78:
Testing writing to system MAIN in section Core with a variable DPL2Decoder of type DPL2Quality and a value of LOWEST, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LOWEST and value read of LOWEST were equal. Test passed!

Testing enum type of EXIDeviceType
Test 79:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AD16, and making sure it has the same value when read back out at the same layer...
Value written of AD16 and value read of AD16 were equal. Test passed!

Test 80:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AD16, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AD16 and value read of AD16 were equal. Test passed!

Testing enum type of EXIDeviceType
Test 81:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AGP, and making sure it has the same value when read back out at the same layer...
Value written of AGP and value read of AGP were equal. Test passed!

Test 82:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AGP, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AGP and value read of AGP were equal. Test passed!

Testing enum type of EXIDeviceType
Test 83:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AMBASEBOARD, and making sure it has the same value when read back out at the same layer...
Value written of AMBASEBOARD and value read of AMBASEBOARD were equal. Test passed!

Test 84:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of AMBASEBOARD, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AMBASEBOARD and value read of AMBASEBOARD were equal. Test passed!

Testing enum type of EXIDeviceType
Test 85:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of DUMMY, and making sure it has the same value when read back out at the same layer...
Value written of DUMMY and value read of DUMMY were equal. Test passed!

Test 86:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of DUMMY, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of DUMMY and value read of DUMMY were equal. Test passed!

Testing enum type of EXIDeviceType
Test 87:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNET, and making sure it has the same value when read back out at the same layer...
Value written of ETHERNET and value read of ETHERNET were equal. Test passed!

Test 88:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNET, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ETHERNET and value read of ETHERNET were equal. Test passed!

Testing enum type of EXIDeviceType
Test 89:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETBUILTIN, and making sure it has the same value when read back out at the same layer...
Value written of ETHERNETBUILTIN and value read of ETHERNETBUILTIN were equal. Test passed!

Test 90:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETBUILTIN, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ETHERNETBUILTIN and value read of ETHERNETBUILTIN were equal. Test passed!

Testing enum type of EXIDeviceType
Test 91:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETTAPSERVER, and making sure it has the same value when read back out at the same layer...
Value written of ETHERNETTAPSERVER and value read of ETHERNETTAPSERVER were equal. Test passed!

Test 92:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETTAPSERVER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ETHERNETTAPSERVER and value read of ETHERNETTAPSERVER were equal. Test passed!

Testing enum type of EXIDeviceType
Test 93:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETXLINK, and making sure it has the same value when read back out at the same layer...
Value written of ETHERNETXLINK and value read of ETHERNETXLINK were equal. Test passed!

Test 94:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of ETHERNETXLINK, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ETHERNETXLINK and value read of ETHERNETXLINK were equal. Test passed!

Testing enum type of EXIDeviceType
Test 95:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of GECKO, and making sure it has the same value when read back out at the same layer...
Value written of GECKO and value read of GECKO were equal. Test passed!

Test 96:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of GECKO, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GECKO and value read of GECKO were equal. Test passed!

Testing enum type of EXIDeviceType
Test 97:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MASKROM, and making sure it has the same value when read back out at the same layer...
Value written of MASKROM and value read of MASKROM were equal. Test passed!

Test 98:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MASKROM, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of MASKROM and value read of MASKROM were equal. Test passed!

Testing enum type of EXIDeviceType
Test 99:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MEMORYCARD, and making sure it has the same value when read back out at the same layer...
Value written of MEMORYCARD and value read of MEMORYCARD were equal. Test passed!

Test 100:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MEMORYCARD, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of MEMORYCARD and value read of MEMORYCARD were equal. Test passed!

Testing enum type of EXIDeviceType
Test 101:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MEMORYCARDFOLDER, and making sure it has the same value when read back out at the same layer...
Value written of MEMORYCARDFOLDER and value read of MEMORYCARDFOLDER were equal. Test passed!

Test 102:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MEMORYCARDFOLDER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of MEMORYCARDFOLDER and value read of MEMORYCARDFOLDER were equal. Test passed!

Testing enum type of EXIDeviceType
Test 103:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MICROPHONE, and making sure it has the same value when read back out at the same layer...
Value written of MICROPHONE and value read of MICROPHONE were equal. Test passed!

Test 104:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of MICROPHONE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of MICROPHONE and value read of MICROPHONE were equal. Test passed!

Testing enum type of EXIDeviceType
Test 105:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of NONE, and making sure it has the same value when read back out at the same layer...
Value written of NONE and value read of NONE were equal. Test passed!

Test 106:
Testing writing to system MAIN in section Core with a variable SlotA of type EXIDeviceType and a value of NONE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NONE and value read of NONE were equal. Test passed!

Testing enum type of SIDeviceType
Test 107:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of AM_BASEBOARD, and making sure it has the same value when read back out at the same layer...
Value written of AM_BASEBOARD and value read of AM_BASEBOARD were equal. Test passed!

Test 108:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of AM_BASEBOARD, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AM_BASEBOARD and value read of AM_BASEBOARD were equal. Test passed!

Testing enum type of SIDeviceType
Test 109:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of DANCEMAT, and making sure it has the same value when read back out at the same layer...
Value written of DANCEMAT and value read of DANCEMAT were equal. Test passed!

Test 110:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of DANCEMAT, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of DANCEMAT and value read of DANCEMAT were equal. Test passed!

Testing enum type of SIDeviceType
Test 111:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_CONTROLLER, and making sure it has the same value when read back out at the same layer...
Value written of GC_CONTROLLER and value read of GC_CONTROLLER were equal. Test passed!

Test 112:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_CONTROLLER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_CONTROLLER and value read of GC_CONTROLLER were equal. Test passed!

Testing enum type of SIDeviceType
Test 113:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_GBA, and making sure it has the same value when read back out at the same layer...
Value written of GC_GBA and value read of GC_GBA were equal. Test passed!

Test 114:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_GBA, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_GBA and value read of GC_GBA were equal. Test passed!

Testing enum type of SIDeviceType
Test 115:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_GBA_EMULATED, and making sure it has the same value when read back out at the same layer...
Value written of GC_GBA_EMULATED and value read of GC_GBA_EMULATED were equal. Test passed!

Test 116:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_GBA_EMULATED, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_GBA_EMULATED and value read of GC_GBA_EMULATED were equal. Test passed!

Testing enum type of SIDeviceType
Test 117:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_KEYBOARD, and making sure it has the same value when read back out at the same layer...
Value written of GC_KEYBOARD and value read of GC_KEYBOARD were equal. Test passed!

Test 118:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_KEYBOARD, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_KEYBOARD and value read of GC_KEYBOARD were equal. Test passed!

Testing enum type of SIDeviceType
Test 119:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_STEERING, and making sure it has the same value when read back out at the same layer...
Value written of GC_STEERING and value read of GC_STEERING were equal. Test passed!

Test 120:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_STEERING, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_STEERING and value read of GC_STEERING were equal. Test passed!

Testing enum type of SIDeviceType
Test 121:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_TARUKONGA, and making sure it has the same value when read back out at the same layer...
Value written of GC_TARUKONGA and value read of GC_TARUKONGA were equal. Test passed!

Test 122:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of GC_TARUKONGA, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of GC_TARUKONGA and value read of GC_TARUKONGA were equal. Test passed!

Testing enum type of SIDeviceType
Test 123:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_CONTROLLER, and making sure it has the same value when read back out at the same layer...
Value written of N64_CONTROLLER and value read of N64_CONTROLLER were equal. Test passed!

Test 124:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_CONTROLLER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of N64_CONTROLLER and value read of N64_CONTROLLER were equal. Test passed!

Testing enum type of SIDeviceType
Test 125:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_KEYBOARD, and making sure it has the same value when read back out at the same layer...
Value written of N64_KEYBOARD and value read of N64_KEYBOARD were equal. Test passed!

Test 126:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_KEYBOARD, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of N64_KEYBOARD and value read of N64_KEYBOARD were equal. Test passed!

Testing enum type of SIDeviceType
Test 127:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_MIC, and making sure it has the same value when read back out at the same layer...
Value written of N64_MIC and value read of N64_MIC were equal. Test passed!

Test 128:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_MIC, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of N64_MIC and value read of N64_MIC were equal. Test passed!

Testing enum type of SIDeviceType
Test 129:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_MOUSE, and making sure it has the same value when read back out at the same layer...
Value written of N64_MOUSE and value read of N64_MOUSE were equal. Test passed!

Test 130:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of N64_MOUSE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of N64_MOUSE and value read of N64_MOUSE were equal. Test passed!

Testing enum type of SIDeviceType
Test 131:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of NONE, and making sure it has the same value when read back out at the same layer...
Value written of NONE and value read of NONE were equal. Test passed!

Test 132:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of NONE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NONE and value read of NONE were equal. Test passed!

Testing enum type of SIDeviceType
Test 133:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of WIIU_ADAPTER, and making sure it has the same value when read back out at the same layer...
Value written of WIIU_ADAPTER and value read of WIIU_ADAPTER were equal. Test passed!

Test 134:
Testing writing to system MAIN in section Core with a variable SIDevice0 of type SIDeviceType and a value of WIIU_ADAPTER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of WIIU_ADAPTER and value read of WIIU_ADAPTER were equal. Test passed!

Testing enum type of HSPDeviceType
Test 135:
Testing writing to system MAIN in section Core with a variable HSPDevice of type HSPDeviceType and a value of ARAMEXPANSION, and making sure it has the same value when read back out at the same layer...
Value written of ARAMEXPANSION and value read of ARAMEXPANSION were equal. Test passed!

Test 136:
Testing writing to system MAIN in section Core with a variable HSPDevice of type HSPDeviceType and a value of ARAMEXPANSION, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ARAMEXPANSION and value read of ARAMEXPANSION were equal. Test passed!

Testing enum type of HSPDeviceType
Test 137:
Testing writing to system MAIN in section Core with a variable HSPDevice of type HSPDeviceType and a value of NONE, and making sure it has the same value when read back out at the same layer...
Value written of NONE and value read of NONE were equal. Test passed!

Test 138:
Testing writing to system MAIN in section Core with a variable HSPDevice of type HSPDeviceType and a value of NONE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NONE and value read of NONE were equal. Test passed!

Testing enum type of Region
Test 139:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_J, and making sure it has the same value when read back out at the same layer...
Value written of NTSC_J and value read of NTSC_J were equal. Test passed!

Test 140:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_J, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NTSC_J and value read of NTSC_J were equal. Test passed!

Testing enum type of Region
Test 141:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_K, and making sure it has the same value when read back out at the same layer...
Value written of NTSC_K and value read of NTSC_K were equal. Test passed!

Test 142:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_K, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NTSC_K and value read of NTSC_K were equal. Test passed!

Testing enum type of Region
Test 143:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_U, and making sure it has the same value when read back out at the same layer...
Value written of NTSC_U and value read of NTSC_U were equal. Test passed!

Test 144:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of NTSC_U, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NTSC_U and value read of NTSC_U were equal. Test passed!

Testing enum type of Region
Test 145:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of PAL, and making sure it has the same value when read back out at the same layer...
Value written of PAL and value read of PAL were equal. Test passed!

Test 146:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of PAL, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of PAL and value read of PAL were equal. Test passed!

Testing enum type of Region
Test 147:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of UNKNOWN, and making sure it has the same value when read back out at the same layer...
Value written of UNKNOWN and value read of UNKNOWN were equal. Test passed!

Test 148:
Testing writing to system MAIN in section Core with a variable FallbackRegion of type Region and a value of UNKNOWN, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of UNKNOWN and value read of UNKNOWN were equal. Test passed!

Testing enum type of ShowCursor
Test 149:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of CONSTANTLY, and making sure it has the same value when read back out at the same layer...
Value written of CONSTANTLY and value read of CONSTANTLY were equal. Test passed!

Test 150:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of CONSTANTLY, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of CONSTANTLY and value read of CONSTANTLY were equal. Test passed!

Testing enum type of ShowCursor
Test 151:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of NEVER, and making sure it has the same value when read back out at the same layer...
Value written of NEVER and value read of NEVER were equal. Test passed!

Test 152:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of NEVER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NEVER and value read of NEVER were equal. Test passed!

Testing enum type of ShowCursor
Test 153:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of ONMOVEMENT, and making sure it has the same value when read back out at the same layer...
Value written of ONMOVEMENT and value read of ONMOVEMENT were equal. Test passed!

Test 154:
Testing writing to system MAIN in section Interface with a variable CursorVisibility of type ShowCursor and a value of ONMOVEMENT, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ONMOVEMENT and value read of ONMOVEMENT were equal. Test passed!

Testing enum type of LogLevel
Test 155:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LDEBUG, and making sure it has the same value when read back out at the same layer...
Value written of LDEBUG and value read of LDEBUG were equal. Test passed!

Test 156:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LDEBUG, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LDEBUG and value read of LDEBUG were equal. Test passed!

Testing enum type of LogLevel
Test 157:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LERROR, and making sure it has the same value when read back out at the same layer...
Value written of LERROR and value read of LERROR were equal. Test passed!

Test 158:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LERROR, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LERROR and value read of LERROR were equal. Test passed!

Testing enum type of LogLevel
Test 159:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LINFO, and making sure it has the same value when read back out at the same layer...
Value written of LINFO and value read of LINFO were equal. Test passed!

Test 160:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LINFO, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LINFO and value read of LINFO were equal. Test passed!

Testing enum type of LogLevel
Test 161:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LNOTICE, and making sure it has the same value when read back out at the same layer...
Value written of LNOTICE and value read of LNOTICE were equal. Test passed!

Test 162:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LNOTICE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LNOTICE and value read of LNOTICE were equal. Test passed!

Testing enum type of LogLevel
Test 163:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LWARNING, and making sure it has the same value when read back out at the same layer...
Value written of LWARNING and value read of LWARNING were equal. Test passed!

Test 164:
Testing writing to system LOGGER in section Options with a variable Verbosity of type LogLevel and a value of LWARNING, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LWARNING and value read of LWARNING were equal. Test passed!

Testing enum type of FreeLookControl
Test 165:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of FPS, and making sure it has the same value when read back out at the same layer...
Value written of FPS and value read of FPS were equal. Test passed!

Test 166:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of FPS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of FPS and value read of FPS were equal. Test passed!

Testing enum type of FreeLookControl
Test 167:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of ORBITAL, and making sure it has the same value when read back out at the same layer...
Value written of ORBITAL and value read of ORBITAL were equal. Test passed!

Test 168:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of ORBITAL, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ORBITAL and value read of ORBITAL were equal. Test passed!

Testing enum type of FreeLookControl
Test 169:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of SIXAXIS, and making sure it has the same value when read back out at the same layer...
Value written of SIXAXIS and value read of SIXAXIS were equal. Test passed!

Test 170:
Testing writing to system FreeLook in section Camera1 with a variable ControlType of type FreeLookControl and a value of SIXAXIS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of SIXAXIS and value read of SIXAXIS were equal. Test passed!

Testing enum type of AspectMode
Test 171:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of ANALOG, and making sure it has the same value when read back out at the same layer...
Value written of ANALOG and value read of ANALOG were equal. Test passed!

Test 172:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of ANALOG, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ANALOG and value read of ANALOG were equal. Test passed!

Testing enum type of AspectMode
Test 173:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of ANALOGWIDE, and making sure it has the same value when read back out at the same layer...
Value written of ANALOGWIDE and value read of ANALOGWIDE were equal. Test passed!

Test 174:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of ANALOGWIDE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ANALOGWIDE and value read of ANALOGWIDE were equal. Test passed!

Testing enum type of AspectMode
Test 175:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of AUTO, and making sure it has the same value when read back out at the same layer...
Value written of AUTO and value read of AUTO were equal. Test passed!

Test 176:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of AUTO, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AUTO and value read of AUTO were equal. Test passed!

Testing enum type of AspectMode
Test 177:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of STRETCH, and making sure it has the same value when read back out at the same layer...
Value written of STRETCH and value read of STRETCH were equal. Test passed!

Test 178:
Testing writing to system GFX in section Settings with a variable AspectRatio of type AspectMode and a value of STRETCH, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of STRETCH and value read of STRETCH were equal. Test passed!

Testing enum type of ShaderCompilationMode
Test 179:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of ASYNCHRONOUSSKIPRENDERING, and making sure it has the same value when read back out at the same layer...
Value written of ASYNCHRONOUSSKIPRENDERING and value read of ASYNCHRONOUSSKIPRENDERING were equal. Test passed!

Test 180:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of ASYNCHRONOUSSKIPRENDERING, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ASYNCHRONOUSSKIPRENDERING and value read of ASYNCHRONOUSSKIPRENDERING were equal. Test passed!

Testing enum type of ShaderCompilationMode
Test 181:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of ASYNCHRONOUSUBERSHADERS, and making sure it has the same value when read back out at the same layer...
Value written of ASYNCHRONOUSUBERSHADERS and value read of ASYNCHRONOUSUBERSHADERS were equal. Test passed!

Test 182:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of ASYNCHRONOUSUBERSHADERS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ASYNCHRONOUSUBERSHADERS and value read of ASYNCHRONOUSUBERSHADERS were equal. Test passed!

Testing enum type of ShaderCompilationMode
Test 183:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of SYNCHRONOUS, and making sure it has the same value when read back out at the same layer...
Value written of SYNCHRONOUS and value read of SYNCHRONOUS were equal. Test passed!

Test 184:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of SYNCHRONOUS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of SYNCHRONOUS and value read of SYNCHRONOUS were equal. Test passed!

Testing enum type of ShaderCompilationMode
Test 185:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of SYNCHRONOUSUBERSHADERS, and making sure it has the same value when read back out at the same layer...
Value written of SYNCHRONOUSUBERSHADERS and value read of SYNCHRONOUSUBERSHADERS were equal. Test passed!

Test 186:
Testing writing to system GFX in section Settings with a variable ShaderCompilationMode of type ShaderCompilationMode and a value of SYNCHRONOUSUBERSHADERS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of SYNCHRONOUSUBERSHADERS and value read of SYNCHRONOUSUBERSHADERS were equal. Test passed!

Testing enum type of TriState
Test 187:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of AUTO, and making sure it has the same value when read back out at the same layer...
Value written of AUTO and value read of AUTO were equal. Test passed!

Test 188:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of AUTO, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of AUTO and value read of AUTO were equal. Test passed!

Testing enum type of TriState
Test 189:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of OFF, and making sure it has the same value when read back out at the same layer...
Value written of OFF and value read of OFF were equal. Test passed!

Test 190:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of OFF, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of OFF and value read of OFF were equal. Test passed!

Testing enum type of TriState
Test 191:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of ON, and making sure it has the same value when read back out at the same layer...
Value written of ON and value read of ON were equal. Test passed!

Test 192:
Testing writing to system GFX in section Settings with a variable ManuallyUploadeBuffers of type TriState and a value of ON, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ON and value read of ON were equal. Test passed!

Testing enum type of TextureFilteringMode
Test 193:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of DEFAULT, and making sure it has the same value when read back out at the same layer...
Value written of DEFAULT and value read of DEFAULT were equal. Test passed!

Test 194:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of DEFAULT, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of DEFAULT and value read of DEFAULT were equal. Test passed!

Testing enum type of TextureFilteringMode
Test 195:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of LINEAR, and making sure it has the same value when read back out at the same layer...
Value written of LINEAR and value read of LINEAR were equal. Test passed!

Test 196:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of LINEAR, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of LINEAR and value read of LINEAR were equal. Test passed!

Testing enum type of TextureFilteringMode
Test 197:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of NEAREST, and making sure it has the same value when read back out at the same layer...
Value written of NEAREST and value read of NEAREST were equal. Test passed!

Test 198:
Testing writing to system GFX in section Enhancements with a variable ForceTextureFiltering of type TextureFilteringMode and a value of NEAREST, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NEAREST and value read of NEAREST were equal. Test passed!

Testing enum type of StereoMode
Test 199:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of ANAGLYPH, and making sure it has the same value when read back out at the same layer...
Value written of ANAGLYPH and value read of ANAGLYPH were equal. Test passed!

Test 200:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of ANAGLYPH, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of ANAGLYPH and value read of ANAGLYPH were equal. Test passed!

Testing enum type of StereoMode
Test 201:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of OFF, and making sure it has the same value when read back out at the same layer...
Value written of OFF and value read of OFF were equal. Test passed!

Test 202:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of OFF, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of OFF and value read of OFF were equal. Test passed!

Testing enum type of StereoMode
Test 203:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of PASSIVE, and making sure it has the same value when read back out at the same layer...
Value written of PASSIVE and value read of PASSIVE were equal. Test passed!

Test 204:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of PASSIVE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of PASSIVE and value read of PASSIVE were equal. Test passed!

Testing enum type of StereoMode
Test 205:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of QUADBUFFER, and making sure it has the same value when read back out at the same layer...
Value written of QUADBUFFER and value read of QUADBUFFER were equal. Test passed!

Test 206:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of QUADBUFFER, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of QUADBUFFER and value read of QUADBUFFER were equal. Test passed!

Testing enum type of StereoMode
Test 207:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of SBS, and making sure it has the same value when read back out at the same layer...
Value written of SBS and value read of SBS were equal. Test passed!

Test 208:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of SBS, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of SBS and value read of SBS were equal. Test passed!

Testing enum type of StereoMode
Test 209:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of TAB, and making sure it has the same value when read back out at the same layer...
Value written of TAB and value read of TAB were equal. Test passed!

Test 210:
Testing writing to system GFX in section Stereoscopy with a variable StereoMode of type StereoMode and a value of TAB, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of TAB and value read of TAB were equal. Test passed!

Testing enum type of WiimoteSource
Test 211:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of EMULATED, and making sure it has the same value when read back out at the same layer...
Value written of EMULATED and value read of EMULATED were equal. Test passed!

Test 212:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of EMULATED, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of EMULATED and value read of EMULATED were equal. Test passed!

Testing enum type of WiimoteSource
Test 213:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of NONE, and making sure it has the same value when read back out at the same layer...
Value written of NONE and value read of NONE were equal. Test passed!

Test 214:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of NONE, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of NONE and value read of NONE were equal. Test passed!

Testing enum type of WiimoteSource
Test 215:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of REAL, and making sure it has the same value when read back out at the same layer...
Value written of REAL and value read of REAL were equal. Test passed!

Test 216:
Testing writing to system WiiPad in section Wiimote1 with a variable Source of type WiimoteSource and a value of REAL, and making sure it has the same value when the absolute value of the setting is read out (when calling getConfigSetting() without specifying a layer)...
Values written of REAL and value read of REAL were equal. Test passed!



Testing that all non-enum types can have delete called on them...

Test 217:
Testing creating a new setting and deleting it.	Test case has system of MAIN, section name of Interface, settingName of NON_EXISTANT_SETTING12, settingType of boolean, and value to be written of true
Error: Setting still exists in layer after calling delete function! Test failed!

Test 218:
Testing creating a new setting and deleting it.	Test case has system of MAIN, section name of Core, settingName of NON_EXISTANT_SETTING12, settingType of s32, and value to be written of 312
Error: Setting still exists in layer after calling delete function! Test failed!

Test 219:
Testing creating a new setting and deleting it.	Test case has system of MAIN, section name of Core, settingName of NON_EXISTANT_SETTING12, settingType of u32, and value to be written of 564
Error: Setting still exists in layer after calling delete function! Test failed!

Test 220:
Testing creating a new setting and deleting it.	Test case has system of MAIN, section name of Core, settingName of NON_EXISTANT_SETTING12, settingType of float, and value to be written of 54.25
Error: Setting still exists in layer after calling delete function! Test failed!

Test 221:
Testing creating a new setting and deleting it.	Test case has system of MAIN, section name of Core, settingName of NON_EXISTANT_SETTING12, settingType of string, and value to be written of newBackendName
Error: Setting still exists in layer after calling delete function! Test failed!

Results:

	Tests Passed: 214
	Tests Failed: 5
	Tests Skipped: 2
Total Tests: 221
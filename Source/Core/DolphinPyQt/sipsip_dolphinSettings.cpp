/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 */

#include "sipAPIsip_dolphin.h"

#line 141 "dolphin.sip"
#include "../DolphinQt2/Settings.h"
#line 12 "./sipsip_dolphinSettings.cpp"

#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 16 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qsize.sip"
#include <qsize.h>
#line 19 "./sipsip_dolphinSettings.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 22 "./sipsip_dolphinSettings.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 25 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 31 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qsettings.sip"
#include <qsettings.h>
#line 34 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 37 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 40 "./sipsip_dolphinSettings.cpp"
#line 244 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43 "./sipsip_dolphinSettings.cpp"
#line 232 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "./sipsip_dolphinSettings.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 49 "./sipsip_dolphinSettings.cpp"
#line 32 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "./sipsip_dolphinSettings.cpp"
#line 148 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 55 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 61 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 67 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 70 "./sipsip_dolphinSettings.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 73 "./sipsip_dolphinSettings.cpp"


class sipSettings : public Settings
{
public:
    sipSettings(QObject*);
    virtual ~sipSettings();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipSettings(const sipSettings &);
    sipSettings &operator = (const sipSettings &);

    char sipPyMethods[7];
};

sipSettings::sipSettings(QObject*a0): Settings(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipSettings::~sipSettings()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipSettings::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_sip_dolphin_qt_metaobject(sipPySelf,sipType_Settings);

    return Settings::metaObject();
}

int sipSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Settings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_sip_dolphin_qt_metacall(sipPySelf,sipType_Settings,_c,_id,_a);

    return _id;
}

void *sipSettings::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_sip_dolphin_qt_metacast(sipPySelf, sipType_Settings, _clname, &sipCpp) ? sipCpp : Settings::qt_metacast(_clname));
}

void sipSettings::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        Settings::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipSettings::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        Settings::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipSettings::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        Settings::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipSettings::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        Settings::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipSettings::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        Settings::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipSettings::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return Settings::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipSettings::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return Settings::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_sip_dolphin_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_sip_dolphin_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipSettings::sipProtect_sender() const
{
    return QObject::sender();
}

int sipSettings::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipSettings::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipSettings::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipSettings::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipSettings::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipSettings::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipSettings::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipSettings::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipSettings::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QSettings::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_Settings_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QObject*sipRes = 0;

#line 550 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 370 "./sipsip_dolphinSettings.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_Settings, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 581 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 427 "./sipsip_dolphinSettings.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_Settings, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_Settings, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_Settings, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_Settings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_Settings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_Settings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_isSignalConnected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Settings_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_Settings, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetThemeDir(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetThemeDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetThemeDir());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetThemeDir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_IsInDevelopmentWarningEnabled(PyObject *, PyObject *);}
static PyObject *meth_Settings_IsInDevelopmentWarningEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsInDevelopmentWarningEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_IsInDevelopmentWarningEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetLastGame(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetLastGame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetLastGame());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetLastGame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetLastGame(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetLastGame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->SetLastGame(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetLastGame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetPaths(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->GetPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetPaths, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetPaths(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->SetPaths(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetPaths, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_RemovePath(PyObject *, PyObject *);}
static PyObject *meth_Settings_RemovePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Settings, &sipCpp, &a0))
        {
            sipCpp->RemovePath(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_RemovePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetDefaultGame(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetDefaultGame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetDefaultGame());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetDefaultGame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetDefaultGame(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetDefaultGame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->SetDefaultGame(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetDefaultGame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetDVDRoot(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetDVDRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetDVDRoot());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetDVDRoot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetDVDRoot(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetDVDRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->SetDVDRoot(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetDVDRoot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetApploader(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetApploader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetApploader());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetApploader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetApploader(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetApploader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->SetApploader(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetApploader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetWiiNAND(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetWiiNAND(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->GetWiiNAND());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetWiiNAND, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetWiiNAND(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetWiiNAND(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Settings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->SetWiiNAND(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetWiiNAND, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetPreferredView(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetPreferredView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetPreferredView();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetPreferredView, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetPreferredView(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetPreferredView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Settings, &sipCpp, &a0))
        {
            sipCpp->SetPreferredView(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetPreferredView, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetConfirmStop(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetConfirmStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetConfirmStop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetConfirmStop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetStateSlot(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetStateSlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetStateSlot();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetStateSlot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_SetStateSlot(PyObject *, PyObject *);}
static PyObject *meth_Settings_SetStateSlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Settings, &sipCpp, &a0))
        {
            sipCpp->SetStateSlot(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_SetStateSlot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetRenderToMain(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetRenderToMain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetRenderToMain();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetRenderToMain, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFullScreen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetFullScreen, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Settings_GetRenderWindowSize(PyObject *, PyObject *);}
static PyObject *meth_Settings_GetRenderWindowSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Settings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Settings, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->GetRenderWindowSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Settings, sipName_GetRenderWindowSize, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Settings(void *, int);}
static void release_Settings(void *sipCppV,int)
{
    Settings *sipCpp = reinterpret_cast<Settings *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_Settings(sipSimpleWrapper *);}
static void dealloc_Settings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipSettings *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Settings(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_Settings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Settings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipSettings *sipCpp = 0;

    {
        QObject* a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipSettings(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Settings[] = {{204, 0, 1}};


static PyMethodDef methods_Settings[] = {
    {SIP_MLNAME_CAST(sipName_GetApploader), meth_Settings_GetApploader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetConfirmStop), meth_Settings_GetConfirmStop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetDVDRoot), meth_Settings_GetDVDRoot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetDefaultGame), meth_Settings_GetDefaultGame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetFullScreen), meth_Settings_GetFullScreen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetLastGame), meth_Settings_GetLastGame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetPaths), meth_Settings_GetPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetPreferredView), meth_Settings_GetPreferredView, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetRenderToMain), meth_Settings_GetRenderToMain, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetRenderWindowSize), meth_Settings_GetRenderWindowSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetStateSlot), meth_Settings_GetStateSlot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetThemeDir), meth_Settings_GetThemeDir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_GetWiiNAND), meth_Settings_GetWiiNAND, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_IsInDevelopmentWarningEnabled), meth_Settings_IsInDevelopmentWarningEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_RemovePath), meth_Settings_RemovePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetApploader), meth_Settings_SetApploader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetDVDRoot), meth_Settings_SetDVDRoot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetDefaultGame), meth_Settings_SetDefaultGame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetLastGame), meth_Settings_SetLastGame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetPaths), meth_Settings_SetPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetPreferredView), meth_Settings_SetPreferredView, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetStateSlot), meth_Settings_SetStateSlot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_SetWiiNAND), meth_Settings_SetWiiNAND, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_Settings_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_Settings_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_Settings_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_Settings_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_Settings_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_Settings_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_Settings_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_Settings_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_Settings_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_Settings_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


pyqt5ClassTypeDef sipTypeDef_sip_dolphin_Settings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_Settings,
        {0}
    },
    {
        sipNameNr_Settings,
        {0, 0, 1},
        33, methods_Settings,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_Settings,
    0,
    init_type_Settings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Settings,
    0,
    0,
    0,
    release_Settings,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &Settings::staticMetaObject,
    0,
    0,
    0
};
